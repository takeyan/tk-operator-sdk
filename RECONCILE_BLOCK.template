// RECONCILE BLOCK BEGIN

        // Define Deployment name and Service name
        dep_name := instance.Name + "-deployment"
        svc_name := instance.Name + "-svc"

        // Check if the deployment already exists, if not create a new one
        depfound := &appsv1.Deployment{}
        err = r.client.Get(context.TODO(), types.NamespacedName{Name: dep_name, Namespace: instance.Namespace}, depfound)
        if err != nil && errors.IsNotFound(err) {
            // Define a new deployment
            reqLogger.Info("Defining a new Deployment for: " + instance.Name)
            dep := r.newDeploymentForCR(instance, dep_name)
            reqLogger.Info("Creating a App Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
            err = r.client.Create(context.TODO(), dep)
            if err != nil {
                reqLogger.Error(err, "Failed to create new Deployment", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
                return reconcile.Result{}, err
            }   
            // Deployment created successfully - return and requeue
            return reconcile.Result{Requeue: true}, nil
        } else if err != nil {
            reqLogger.Error(err, "Failed to get Deployment")
            return reconcile.Result{}, err
        }

        // デプロイメントのReplicasをCRのspecのsizeと同じになるように調整する
        size := instance.Spec.Size
        if *depfound.Spec.Replicas != size {
            depfound.Spec.Replicas = &size
            err = r.client.Update(context.TODO(), depfound)
            if err != nil {
                reqLogger.Error(err, "Failed to update Deployment.", "Deployment.Namespace", depfound.Namespace, "Deployment.Name", depfound.Name)
                return reconcile.Result{}, err
            }
        }

        // Check if the service already exists, if not create a new one
        svcfound := &corev1.Service{}
        err = r.client.Get(context.TODO(), types.NamespacedName{Name: svc_name, Namespace: instance.Namespace}, svcfound)
        if err != nil && errors.IsNotFound(err) {
            // Define a new service
            reqLogger.Info("Defining a new Service for: " + instance.Name)
            svc := r.newServiceForCR(instance, svc_name)
            reqLogger.Info("Creating a App Service", "Service.Namespace", svc.Namespace, "Service.Name", svc.Name)
            err = r.client.Create(context.TODO(), svc)
            if err != nil {
                reqLogger.Error(err, "Failed to create new Service", "Service.Namespace", svc.Namespace, "Service.Name", svc.Name)
                return reconcile.Result{}, err
            }
        } else if err != nil {
            reqLogger.Error(err, "Failed to get Service")
            return reconcile.Result{}, err
        }


    // Update the CR status with the pod names
        // List the pods for this CR's deployment
        podList := &corev1.PodList{}
        listOpts := []client.ListOption{
            client.InNamespace(instance.Namespace),
            client.MatchingLabels(newLabelsForCR(instance.Name)),
        }
        err = r.client.List(context.TODO(), podList, listOpts...)
        if err != nil {
            reqLogger.Error(err, "Failed to list pods.", "CR.Namespace", instance.Namespace, "CR.Name", instance.Name)
            return reconcile.Result{}, err
        }
        podNames := getPodNames(podList.Items)

        // Update status.Nodes if needed
        if !reflect.DeepEqual(podNames, instance.Status.Nodes) {
            instance.Status.Nodes = podNames
            err := r.client.Status().Update(context.TODO(), instance)
            if err != nil {
                reqLogger.Error(err, "Failed to update CR status.")
                return reconcile.Result{}, err
            }
        }


        // Deployment and Service already exist - don't requeue
        reqLogger.Info("Skip reconcile: Deployment and Service already exists", "Deployment.Name", depfound.Name, "Service.Name", svcfound.Name)
        return reconcile.Result{}, nil

        }       



// newDeploymentForCR returns a busybox pod with the same name/namespace as the cr
func (r *Reconcile__CRKIND__) newDeploymentForCR(cr *__GROUPNAME____VERSION__.__CRKIND__, dep_name string) *appsv1.Deployment {
    labels := newLabelsForCR(cr.Name)
    dep := &appsv1.Deployment{
        ObjectMeta: metav1.ObjectMeta{
            Name: dep_name,
            Namespace: cr.Namespace,
            Labels: labels,
        },
        Spec: appsv1.DeploymentSpec{
            Selector: &metav1.LabelSelector{
                MatchLabels: labels,
            },
          Replicas: &cr.Spec.Size,
            Template: corev1.PodTemplateSpec{
                ObjectMeta: metav1.ObjectMeta{Labels: labels },
                Spec: corev1.PodSpec{
                    Containers: []corev1.Container{
                        {
                            Name: "__APPNAME__",
                           Image: "takeyan/flask:0.0.3",
                            Ports: []corev1.ContainerPort{{
                                ContainerPort: 5000,
                            }},
                            Env: []corev1.EnvVar{
                                {
                                    Name: "K8S_NODE_NAME",
                                    ValueFrom: &corev1.EnvVarSource{ FieldRef: &corev1.ObjectFieldSelector{ FieldPath: "spec.nodeName" }},
                              },
                                {
                                    Name: "K8S_POD_NAME",
                                    ValueFrom: &corev1.EnvVarSource{ FieldRef: &corev1.ObjectFieldSelector{ FieldPath: "metadata.name" }},
                                },
                                {
                                    Name: "K8S_POD_IP",
                                    ValueFrom: &corev1.EnvVarSource{ FieldRef: &corev1.ObjectFieldSelector{ FieldPath: "status.podIP" }},
                                },
                            },
                        },
                   },      
                },
            },
        },
    }
    controllerutil.SetControllerReference(cr, dep, r.scheme)
    return dep
}


func (r *Reconcile__CRKIND__) newServiceForCR(cr *__GROUPNAME____VERSION__.__CRKIND__, svc_name string) *corev1.Service {
    labels := newLabelsForCR(cr.Name)
    svc := &corev1.Service{
        ObjectMeta: metav1.ObjectMeta{
            Name: svc_name,
            Namespace: cr.Namespace,
        },
        Spec: corev1.ServiceSpec{
            Ports: []corev1.ServicePort{{
                Protocol: "TCP",
                Port: __CLUSTERPORT__,
                TargetPort: intstr.FromInt(__CLUSTERPORT__),
            }},
            Type: corev1.ServiceTypeNodePort,
            Selector: labels,
        },
    }
    controllerutil.SetControllerReference(cr, svc, r.scheme)
    return svc    
}

// newLabelsForCR returns the labels for selecting the resources
// belonging to the given CR name.
func newLabelsForCR(name string) map[string]string {
    return map[string]string{"app": "__APPNAME__", "__APPNAME___cr": name}
}

// getPodNames returns the pod names of the array of pods passed in
func getPodNames(pods []corev1.Pod) []string {
    var podNames []string
    for _, pod := range pods {
        podNames = append(podNames, pod.Name)
    }
    return podNames
}

// RECONCILE BLOCK END


